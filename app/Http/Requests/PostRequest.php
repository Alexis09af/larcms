<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class PostRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        //Obligamos a que estos elementos del formulario sean obligatorios
        $rules =
            [
                'titulo' => 'required',
                'excerpt' => 'required',
                'slug' => 'required|unique:lc_posts',
                'body' => 'required',
                'categoria_id' => 'required',
                'published_at' => 'fecha:Y-m-d H:i:s',
                'image' => 'mimes:jpg,jpeg,bmp,png'
            ];

        switch($this->method()){
            case 'PUT':
            case 'PATCH':
                $rules['slug'] = 'required|unique:lc_posts,slug,'.$this->route('blog');
                default:break;
        }
        return $rules;
    }

    //Mensajes de error
    public function messages(){

        return [
            'required' => 'Campo obligatorio',
            'fecha' => 'formato incorrecto (Y-m-d H:m:s)',
            'mimes' => 'Formatos: jpg, jpeg, bmp, png'
        ];

    }
/*
    public function getValidatorInstance()
    {
        $validator = parent::getValidatorInstance(); // TODO: Change the autogenerated stub
        $validator->extend(
            'valid_date',
            function ($attribute, $value, $parameters)
            {
                if (! is_string($value) && ! is_numeric($value)) {
                    return false;
                }

                $date = DateTime::createFromFormat($parameters[0], $value);
                return empty($value) || $date && $date->format($parameters[0]) == $value;
            }
        );
        return $validator;
    }*/
}



